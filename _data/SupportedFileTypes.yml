---
 - file_type: 'Android XML'
   template: 'standard'
   link: /pages/supported-file-types/Android-XML/
   extension: '.xml'
   smartling_identifier: 'android'
   download_sample: 'android.xml'
   resource_info: '<ul><li><a href="http://developer.android.com/guide/topics/resources/string-resource.html">Android String Resources</a></li><li><a href="http://developer.android.com/guide/topics/resources/localization.html">Android Localization</a></li></ul>'
   keys_variants: 'Every string is created with key/variant metadata, which is the value of the <code>string.name</code> attribute.  If the value of two strings is the same, but the <code>string.name</code> attribute is different, Smartling creates two strings.'
   string_instructions: 'String instructions can be set using the instruction_comments_enabled and instruction_attributes directives'
   other: '<p>To exclude a string from translation use the <code>translatable="FALSE"</code> attribute and value in the string tag:</p><pre><code>&lt;string name=&quot;string_11&quot; translatable=&quot;FALSE&quot;&gt;This android string has been marked not to be translated with translable attribute.&lt;/string&gt;</code></pre><p>When downloading translated Android XML files via the <a href="/pages/API/FileAPI/Download-File/">File API</a>, setting the parameter <code>includeOriginalStrings=false</code> will strip untranslated elements from the file.'
   directive_format: '&lt!-- smartling.[directive_name] = [value] --&gt'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '&lt!-- '
   directive_suffix: ' --&gt'
   directives:
      - placeholder_format_custom
      - placeholder_format
      - instruction_comments_enabled
      - instruction_attributes

 - file_type: 'iOS String Files'
   template: 'standard'
   link: /pages/supported-file-types/iOS-string-files/
   extension: '.strings'
   smartling_identifier: 'ios'
   download_sample: 'ios.strings'
   resource_info: '<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/LoadingResources/Strings/Strings.html">String Resources</a>'
   keys_variants: 'Every string is created with key/variant metadata based on the keys in the file. If the keys are different for two strings with the same value, Smartling will create two strings using the key as context metadata.'
   string_instructions: 'Smartling will automatically ingest and display file comments as instructions for translators. The comments must immediately precede the string. For example, for the following comment:<pre><code>/* Back button label */<br/>"Back" = "Back";</code></pre><p>the text "Back button label" will be captured as a file instruction</p>If the comment contains the following text:</p><pre><code>/* No comment provided by engineer. */</code></pre><p>or if a line separates the comment and string, such as:</p><pre><code>/* Back button label */<br/><br/>"Back" = "Back";</code></pre><p>Smartling will not create an instruction.</p>'
   directive_format: '/* smartling.[directive_name] = [value] */'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '/* '
   directive_suffix: ' */'
   directives:
      - placeholder_format_custom
      - placeholder_format

 - file_type: 'iOS Stringsdict'
   template: 'standard'
   link: /pages/supported-file-types/iOS-stringsdict/
   extension: '.stringsdict'
   smartling_identifier: 'stringsdict'
   download_sample: ''
   resource_info: '<ul><li><a href="https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/StringsdictFileFormat/StringsdictFileFormat.html">Stringsdict File Format</a></li><li><a href="https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/LocalizingYourApp/LocalizingYourApp.html">Localizing your App</a></li></ul>'
   intro: '<p>Smartling supports iOS .stringsdict format for plural sensitive content localization.<p>Note that Xcode’s XLIFF localization feature does not include plural strings. If your XLIFF-localized application includes plural strings, you will need to separately upload the .stringsdict file along with your XLIFF file.</p><p>This XML file format is used to capture the plural sensitive strings that will be localized.</p><p>Currently Smartling does not support gender-sensitive strings.</p><p>Smartling does not expect English source files with “zero” form source strings. Smartling complies strictly with CLDR which defines English as having two forms; “one” (singular) and “other” (plural). If you upload a source file with Zero form strings, the zero plural form will not be shown in the Smartling dashboard.</p><p>Complex plural strings (a.k.a. multiplurals) are supported, but Smartling advises against creating such strings which are difficult to translate correctly from a linguistic perspective.  If a multiplural string is in your .stringsdict Smartling will capture two separate strings, but they will not be associated with each other. We advise you to add instructions and visual context hints to help the translators understand how the multiplural string is actually used in your application.</p><p>No file API directives are supported.</p>'

 - file_type: 'Gettext PO/POT'
   template: 'standard'
   link: /pages/supported-file-types/Gettext-PO-POT/
   extension: '.pot / .po'
   smartling_identifier: 'gettext'
   download_sample: 'gettext.pot'
   resource_info: '<a href="http://www.gnu.org/software/gettext/">GNU Gettext Documentation</a>'
   keys_variants: '<p>Smartling also supports the msgctxt parameter that allows you to have Smartling capture a string as a variant.  When a gettext string includes msgctxt metadata it will be created as variant using the value of msgctxt.</p><p>For example:</p><pre><code>msgctxt "Home Page Menu Navigation"<br/>msgid "Home"<br/>msgstr ""<br/>msgctxt "Home Address Label"<br/>msgid "Home"<br/>msgstr ""</code></pre><p>Will result in two strings for translation, both with the value "Home". The translators can choose to to make the translation the same or not.  The value of msgctxt displays to translators in the Translation Interface and the Smartling Dashboard.  See the <a href="http://support.smartling.com/entries/22279686-about-variants-translation-management-system">Knowledge Base</a> for more on translation variants.<p>'
   string_instructions: '<p>Smartling includes comments in gettext files as instructions for translators. Comments follow the gettext standard:</p><pre><code>#. This is an instruction that is included in the file above a string.<br/>#. This is also an instruction that will be presented to translators.<br/>#: arch/linux/directory_reader.py:101<br/>msgid "Original source string."<br/>msgstr ""</code></pre>'
   other: '<p><strong>HTML</strong></p><p>Smartling automatically formats Gettext strings with HTML.  No integration is required.  HTML parsing can be turned on in order to create smaller source strings. Adding the <code>smartling.string_format</code> directive with value <code>html</code> turns on HTML parsing.  If this directive is present in the file Smartling explicitly parses all subsequent strings as HTML.  With HTML parsing on, strings will be created based on HTML block elements.  Strings that have no HTML are captured as normal. This directive is completely optional.</p><p><strong>Plurals</strong></p><p>If you include a plural-forms header in a original uploaded file, Smartling will return the locale specific plural-forms header in the translated file.<p>For example if an English source file contains the following header:</p><pre>"Plural-Forms: nplurals=2; plural=n == 1 ? 0 : 1;\n"</pre><p>A Russian translation file will contain:</p><pre>"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"</pre><p><strong>Note:</strong> Smartling supports the CLDR standards for plurals. For some languages, Gettext plural support differs from the CLDR standards. For example, CLDR allows four plural forms for Polish: one; few; many and other, while Gettext only supports one; few; and many. Smartling will allow translations for all four CLDR plural forms, but when downloading translated Gettext files, only those supported by Gettext will be included.</p>'
   directive_format: '# smartling.[directive_name] = [value]'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '# '
   directive_suffix: ''
   directives:
      - placeholder_format_custom
      - placeholder_format

 - file_type: 'HTML'
   template: 'standard'
   link: /pages/supported-file-types/HTML/
   extension: '.html'
   smartling_identifier: 'html'
   resource_info: '<a href="http://www.w3.org/TR/html5/">HTML5 Standards</a>'
   intro: 'By default Smartling will create a single String for each block element in the HTML document.  Additionally the value of <code>alt</code> and <code>title</code> attributes are captured as a single string. Smartling does not captre the values of any other attributes. '
   directive_format: '&lt!-- smartling.[directive_name] = [value] --&gt'
   directive_instructions: ''
   directive_prefix: '&lt!-- '
   directive_suffix: ' --&gt' 
   directives:
      - placeholder_format_custom
      - force_inline_for_tags

 - file_type: 'Java Properties'
   template: 'standard'
   link: /pages/supported-file-types/Java-Properties/
   extension: '.properties'
   smartling_identifier: 'javaProperties'
   download_sample: 'java.properties'
   resource_info: '<a href="http://docs.oracle.com/javase/tutorial/i18n/index.html">Java Localization Documentation</a>'
   keys_variants: 'Every string is created with key/variant metadata based on the keys in the file. If the keys are different for two strings with the same value, Smartling will create two strings using the key as context metadata.'
   string_instructions: 
   other: '<p>By default Smartling automatically captures properties that are formatted for both the MessageFormat.format and String.format methods.  By default all files are parsed as if <code>placeholder_format=JAVA</code> and <code>string_format=MESSAGE_FORMAT</code>, unless some other directive is given.</p><p><code>string_format=MESSAGE_FORMAT</code> uses placeholders in the syntax: <code>{*}</code> and the single quote (apostrophe) is an escape character, so to use the single quote character, it must be escaped as <code>''''</code>.  When MessageFormat parsing is on (default) in your source file single quotes must be escaped as two single quotes: <code>''''</code> otherwise it will not be captured.  If a translation has a single quote character, it will be escaped in the downloaded file as <code>''''</code>. Translators may use a single quote even when the original string has none. If MessageFormat is turned off then strings will not need single quotes escaping to capture them, and single quotes in translations will not be escaped.  You can turn MessageFormat off and on in a single file, using inline directives.</p><p><code>placeholder_format=JAVA</code> uses c-style placeholder syntax: <code>%d</code>, <code>%s</code>, <code>%4.2f</code>, etc. and because the <code>%</code> character is an escape character so displaying a single percent character literal requires that it be escaped as <code>%%</code> . When JAVA parsing is on (default) in your source file single percent characters must be escaped as two single percent characters: %% otherwise the % may trigger placeholder treatment and create an invalid placeholder in your string that causes incorrect capture and prevents proper translation.  When JAVA parsing is on Smartling will escape the % character in a translated string if the string has a JAVA formatted placeholder. Otherwise the % character in the translation are delivered unescaped.</p><p>If this default behavior is not desirable for your content you can turn off either of the formatting treatments for the entire file or just for the strings where you don''t want the behavior.  You can turn the behavior off and on throughout the file as needed.</p><p>You can also specify your own custom placeholder syntax that is in addition to the standard behavior from the above two directives.</p><p><strong>Note:</strong> When using <a href="/pages/API/Download-Translations/">file/get</a> to download properties files from Smartling, the parameter <code>includeOriginalStrings=false</code> ensures that if no translations are available, Smartling returns an empty string. If the parameter is set to true, Smartling returns the original string.</p>'
   directive_format: '# smartling.[directive_name] = [value]'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '# '
   directive_suffix: ''
   directives:
      - placeholder_format_custom
      - placeholder_format
      - string_format
      - download_format

 - file_type: 'YAML'
   template: 'standard'
   link: /pages/supported-file-types/YAML/
   extension: '.yml'
   smartling_identifier: 'yaml'
   download_sample: 'yaml.yml'
   resource_info: '<a href="http://guides.rubyonrails.org/i18n.html">Rails Internationalization</a>'
   keys_variants: 'Every string is created with variant metadata. The variant metadata is the full path of keys leading to the translatable string.'
   string_instructions: 'Smartling will automatically ingest and display file comments as instructions for translators. The comments must immediately precede the string. For example, for the following comment:<pre># Back button label<br/>button: ''Back''</pre><p>the text "Back button label" will be captured as a file instruction for the string ''Back''.</p>'
   specify_paths: '<p>Some directives require you to specify a path or set of paths to keys or strings in the file. A path is a slash-separated string which uses Xpath-like syntax (although it''s not Xpath.). The nodes separator is always <code>/</code> (slash).</p><p>Wildcards are allowed in path definitions.<p><ul><li>If no wildcards, then the path identifies a single node and all its children ("exact subpath").</li><li>If wildcards, then a path identifies a set of nodes and all their children ("path pattern"). Currently, only the <code>*</code> (asterisk) wildcard is implemented, which means "one or more nodes with any names".</li><li>Exact subpaths have precedence over path patterns.</li></ul><p>For example, in the following path specifications:</p><pre>[*/text, */string, system/log/text, system/log/text/details]</pre><p>Smartling processes these paths as follows:</p><ul><li><code>/description/text</code> — matches <code>*/text</code> pattern</li><li><code>/description/general/text</code> - matches <code> */text</code> pattern directly.</li><li><code>/description/text/general</code> — matches - its parent, <code>/description/text</code> , matches <code>*/text</code> pattern</li><li><code>/system/log/text</code> — matches both <code>/system/log/text</code> (exact path) and <code>*/text</code> (pattern); exact path wins</li><li><code>/system/log/text/details</code> — its parent, <code>/system/log/text</code>, matches both exact path and pattern; exact path wins</li></ul>'
   other: 'Smartling supports plural translations when the original language strings use the <a href="http://guides.rubyonrails.org/i18n.html#pluralization">Ruby on Rails i18n API''s pluralization syntax</a>. To avoid mistakenly ingesting strings as plurals because they happen to use the key name "one,other" etc., use the plurals_detection directive to turn detection off and then back on again.'
   directive_format: '# smartling.[directive_name] = [value]'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '# '
   directive_suffix: '' 
   directives:
      - placeholder_format_custom
      - placeholder_format
      - plurals_detection
      - download_format
      - string_format_paths

 - file_type: 'XLIFF'
   template: 'standard'
   link: /pages/supported-file-types/XLIFF/
   extension: '.xml, .xlf, .xliff'
   smartling_identifier: 'xliff'
   download_sample: 'xliff.xml'
   resource_info: '<ul><li><a href="http://en.wikipedia.org/wiki/XLIFF">Background on XLIFF</a></li><li><a href="http://docs.oasis-open.org/xliff/xliff-core/xliff-core.html">OASIS specification</a></li></ul>'
   intro: 'Smartling supports .xlf, .xliff, and .xml files that use the XML Localization Interchange File Format (XLIFF)'
   keys_variants: 
   directive_format: '&lt!-- smartling.[directive_name] = [value] --&gt'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '&lt!-- '
   directive_suffix: ' --&gt'
   string_instructions: 
   directives:
      - placeholder_format_custom
      - xliff_tags_to_placeholder

 - file_type: 'Custom XML'
   template: 'standard'
   link: /pages/supported-file-types/Custom-XML/
   extension: '.xml'
   smartling_identifier: 'xml'
   download_sample: 'customxml.xml'
   resource_info: '<a href="http://www.w3.org/standards/xml/">XML Standards</a>'
   intro: 'Smartling supports generic XML files by processing text within specified tags and attributes. You must specify the tags and attributes you want translated using the translate_paths directive'
   keys_variants: 'Key and Variant metadata must be enabled and configured using the source_key_paths and variants_enabled directives.'
   directive_format: '&lt!-- smartling.[directive_name] = [value] --&gt'
   directive_instructions: 'The directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive.  Directives apply to all strings that follow them. Directives can be changed throughout the file'
   directive_prefix: '&lt!-- '
   directive_suffix: ' --&gt'
   string_instructions: 
   specify_paths: '<p>Some directives require you to specify a path or set of paths to keys or strings in the file. A path is a slash-separated string which uses Xpath-like syntax (although it''s not Xpath.). The nodes separator is always <code>/</code> (slash).</p><p>Wildcards are not allowed in path definitions.</p><p>You can also specify an attribute by using <code>[node].[attribute]</code></p> For the <code>translate_paths</code> directive, ending the path with a trailing <code>/</code> (slash) will also translate all child nodes.'
   other: '<p>Note: Some XML files closely resemble HTML files and are more effectively translated by parsing them as HTML files. Smartling allows you to specify HTML as the file type when uploading an XML file in the dashboard to cope with this type of XML files. If uploading via API, give "html" as the Smartling identifier for the file.</p><p><strong>Note:</strong> When using <a href="/pages/API/Download-Translations/">file/get</a> to download properties files from Smartling, the parameter <code>includeOriginalStrings=false</code> ensures that if no translations are available, Smartling returns an empty string. If the parameter is set to true, Smartling returns the original string.</p>'
   directives:
      - translate_paths
      - string_format_paths
      - placeholder_format_custom
      - placeholder_format
      - sltrans
      - source_key_paths
      - variants_enabled

 - file_type: 'JSON'
   template: 'standard'
   link: /pages/supported-file-types/JSON/
   extension: '.json'
   smartling_identifier: 'json'
   download_sample: 'json.json'
   resource_info: '<a href="http://json.org/">Official JSON Standards</a>'
   keys_variants: 'By default, the full path of keys leading to a string are captured as Key and Variant metadata. Custom key paths can be set and variant behavior turned off with directives'
   specify_paths: '<p>Some directives require you to specify a path or set of paths to keys or strings in the file. A path is a slash-separated string which uses Xpath-like syntax (although it''s not Xpath.). The nodes separator is always <code>/</code> (slash).</p><p>Wildcards are allowed in path definitions.<p><ul><li>If no wildcards, then the path identifies a single node and all its children ("exact subpath").</li><li>If wildcards, then a path identifies a set of nodes and all their children ("path pattern"). Currently, only the <code>*</code> (asterisk) wildcard is implemented, which means "one or more nodes with any names".</li><li>Exact subpaths have precedence over path patterns.</li></ul><p>For example, in the following path specifications:</p><pre>[*/text, */string, system/log/text, system/log/text/details]</pre><p>Smartling processes these paths as follows:</p><ul><li><code>/description/text</code> — matches <code>*/text</code> pattern</li><li><code>/description/general/text</code> - matches <code> */text</code> pattern directly.</li><li><code>/description/text/general</code> — matches - its parent, <code>/description/text</code> , matches <code>*/text</code> pattern</li><li><code>/system/log/text</code> — matches both <code>/system/log/text</code> (exact path) and <code>*/text</code> (pattern); exact path wins</li><li><code>/system/log/text/details</code> — its parent, <code>/system/log/text</code>, matches both exact path and pattern; exact path wins</li></ul>'
   other: '<p>New defaults for JSON handling are in place for accounts created after June 11 2015. See <a href="http://support.smartling.com/hc/en-us/articles/205589697">here</a> for details.</p><p><strong>Note:</strong> When using <a href="/pages/API/Download-Translations/">file/get</a> to download properties files from Smartling, the parameter <code>includeOriginalStrings=false</code> ensures that if no translations are available, Smartling returns an empty string. If the parameter is set to true, Smartling returns the original string.</p>'
   directive_format: '{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"smartling" : {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"directive_name" : "value",<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"directive_name" : "value",<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"..."<br/>&nbsp;&nbsp;&nbsp;&nbsp;},<br/>&nbsp;&nbsp;&nbsp;&nbsp;...<br/>}'
   directive_instructions: 'JSON directives are set at the top of the file, in the "smartling" node. Directives apply to the whole file and cannot be changed.'
   directives:
      - translate_mode
      - translate_paths
      - source_key_paths
      - placeholder_format_custom
      - placeholder_format
      - variants_enabled
      - string_format_paths

 - file_type: 'QT Linguist'
   template: 'standard'
   link: /pages/supported-file-types/QT-Linguist/
   extension: '.ts'
   smartling_identifier: 'qt'
   resource_info: '<a href="http://doc.qt.digia.com/4.5/linguist-ts-file-format.html">QT Linguist Docs</a>'
   default_placeholders: ''
   keys_variants: 
   keys_variants_info: ''
   directive_style: 
   string_instructions: 
   other: 'Smartling natively supports the plural forms from QT Linguist files.'

 - file_type: 'MadCap Lingo ZIP packages'
   template: 'standard'
   link: /pages/supported-file-types/Madcap-Lingo-ZIP-Packages/
   extension: '.zip'
   smartling_identifier: 'madcap'
   download_sample: 'madcap.zip'
   resource_info: '<a href="http://www.madcapsoftware.com/products/lingo/">Madcap Lingo software</a>'
   intro: '<p>A MadCap package is a ZIP-archive with one or more XLIFF files, optionally organized in directories.</p><p>All notes on <a href="#xliff">XLIFF processing</a> also apply to MadCap packages.</p><p><strong>Note:</strong> A MadCap archive is treated as a single file. Translated strings in the archive will be associated with the .zip file, not the individual XLIFF files.</p><p>Non-XLIFF files in the archive are excluded from processing.</p><p>Directory structure and non-XLIFF files are preserved when downloading the translated archive.</p>'


 - file_type: 'Office Open XML'
   template: 'standard'
   link: /pages/supported-file-types/Office-Open-XML/
   extension: '.docx, .xlsx, .pptx'
   smartling_identifier: 'docx'
   resource_info: '<a href="http://msdn.microsoft.com/en-ca/office/bb265236.aspx">Open XML for Developers</a>'
   intro: '<p>Smartling supports Microsoft Office Open XML format files (file extensions .docx .xlsx .pptx) on Microsoft 2007 and higher.</p><p>You can upload these documents to a “Business Document” project type.</p>'


 - file_type: 'InDesign Markup Language'
   template: 'standard'
   link: /pages/supported-file-types/Adobe-IDML/
   extension: '.idml'
   smartling_identifier: 'idml'
   resource_info: '<a href="http://www.adobe.com/devnet/indesign/documentation.html#idml">InDesign Markup Language Resources</a>'
   keys_variants_info: ''
   directive_style: 
   string_instructions: 


 - file_type: 'Resx'
   template: 'standard'
   link: /pages/supported-file-types/RESX/
   extension: '.resx and .resw'
   smartling_identifier: 'resx'
   resource_info: '<a href="http://msdn.microsoft.com/en-us/library/ekyft91f%28v=vs.90%29.aspx">Microsoft Resx Resources</a>'
   string_instructions: '<p>Smartling automatically captures RESX comments and makes them translator instructions.</p><pre><code>&lt;data name=&quot;resx_string6&quot; xml:space=&quot;preserve&quot;&gt;<br/>&nbsp;&nbsp;&nbsp;&lt;value&gt;resx string6 has a comment.&lt;/value&gt;<br/>&nbsp;&nbsp;&nbsp;&lt;comment&gt;comment for manual resx string6 will appear as a Smartling translator instruction&lt;/comment&gt;<br/>&lt;/data&gt;</code></pre>'
   directive_format: '&lt!-- smartling.[directive_name] = [value] --&gt'
   directive_instructions: 'The inline directive must be a single directive on one line within its own comment block, and there should not be any inline trailing symbols after the directive.'
   directive_prefix: '&lt!-- '
   directive_suffix: ' --&gt'
   directives:
      - placeholder_format_custom


 - file_type: 'Plain Text'
   template: 'standard'
   link: /pages/supported-file-types/Plain-Text/
   extension: '.txt'
   smartling_identifier: 'plainText'
   resource_info: '<a href=""></a>'
   intro: 'The plain text document format is a simple way to quickly translate text. Smartling considers each line of text in the document a single translation string.  Each string is considered unique by file - which means if two files have the exact same line of text - they will be captured as two separate strings. '
   directive_format: 'smartling.[directive_name] = [value]'
   directive_instructions: 'Unlike other file types, plain text does not support inline file directives as comments, in order to use a directive you must specify each directive using the <a href="/pages/API/Download-Translations/">file upload API</a>'
   directives:
      - placeholder_format_custom
      - placeholder_format

 - file_type: 'CSV'
   template: 'standard'
   link: /pages/supported-file-types/CSV/
   extension: '.csv'
   smartling_identifier: 'csv'
   resource_info: '<a href="http://www.ietf.org/rfc/rfc4180.txt">Comma-Separated Values (CSV) files  RFC</a>'
   default_placeholders: ''
   keys_variants: 
   keys_variants_info: ''
   string_instructions: 'Set using string_instructions_paths directive.'
   specify_paths: '<p>Some directives require you to specify a path or set of paths to keys or strings in the file. A path in CSV files is simply a column number, such as <code>1</code></p><p><strong>Note:</strong> When declaring a path for a key or string instruction the key or instruction will be applied to the next translatable string to the right, so you will need to organize your files so that keys and instructions are to the left of translatable strings in each row.</p>'
   other: '<p>You may define values with and without quotations. For example:</p> <pre><code>value1, "Value 2"</code></pre> <p>If you want to use the symbol " inside quoted value you escape it with double quotes like:</p> <pre><code>"value""178"</code></pre> <p>which corresponds to the string: <strong?value"178</strong></p><p>Smartling offers several options for downloading CSV files. <a href="/pages/Misc/CSV-Download/">More info</a></p>'
   directive_format: '# smartling.[directive_name] = [value]'
   directive_prefix: '# '
   directive_suffix: ''
   directive_instructions: 'Directives are specified using comments. Each directive must be a single comment on one line, and there should not be any inline trailing symbols after the directive. The directives must be defined at the top of the file, ahead of the csv content.'
   directives:
      - field_separator
      - string_encloser
      - string_format_paths
      - paths
      - translation_language_path
      - output_original_row
      - source_key_paths
      - placeholder_format
      - placeholder_format_custom
      - strip_instructions_on_download
      - first_row_header
      - string_instructions_paths
      - locales_map
      - add_utf8_bom
      - output_not_translated_row
